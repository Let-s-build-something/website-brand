name: Distribute Web to FTP

on:
  push:
    branches: [ "release" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Prepare access to everything
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Run WasmJsBrowserDistribution script to generate web assembly files
      - name: Run WasmJsBrowserDistribution
        run: .\gradlew wasmJsBrowserDistribution

      # Rename random named .wasm to random.wasm, so that we can later preload it in index.html
      - name: Rename Random String WASM File
        run: |
          $baseDir = "${{ github.workspace }}\composeApp\build\dist\wasmJs\productionExecutable"
          
          # Get all .wasm files in the directory
          $wasmFiles = Get-ChildItem -Path $baseDir -Filter "*.wasm"
          
          foreach ($wasmFile in $wasmFiles) {
              # Check if the file is not composeApp.wasm
              if ($wasmFile.Name -ne "composeApp.wasm") {
                  # Rename the file to random.wasm
                  $newFilePath = Join-Path $wasmFile.Directory.FullName "random.wasm"
                  Rename-Item -Path $wasmFile.FullName -NewName $newFilePath
                  break
              }
          }

      - name: Upload files to FTP using PowerShell
        run: |
          $baseDir = "${{ github.workspace }}\composeApp\build\dist\wasmJs\productionExecutable"
          $ftpServer = "${{ secrets.FTP_SERVER_DOMAIN }}"
          $ftpUsername = "${{ secrets.FTP_USERNAME }}"
          $ftpPassword = "${{ secrets.FTP_PASSWORD }}"
          
          # Get all files recursively in the base directory
          Get-ChildItem -Path $baseDir -Recurse -File | ForEach-Object {
              # Create the relative path for FTP
              $relativePath = $_.FullName.Substring($baseDir.Length).Replace("\", "/")  # Convert backslashes to slashes
              $ftpUrl = "ftp://$ftpServer/www$relativePath"
          
              # Create the target directory on the FTP server without logging output
              $createDirCmd = "curl --ftp-create-dirs -s -u ${ftpUsername}:${ftpPassword} ${ftpUrl}"
              Invoke-Expression $createDirCmd
          
              # Upload the file to FTP without logging output
              $uploadCmd = "curl -T `"$($_.FullName)`" -s -u ${ftpUsername}:${ftpPassword} ${ftpUrl}"
              Invoke-Expression $uploadCmd
          }